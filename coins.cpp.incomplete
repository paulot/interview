// 25, 10, 5, 1
// Represent all ways of using coins to get to a value n

#include <iostream>
#include <string>

using namespace std;

struct coins {
    int tFive;
    int ten;
    int five;
    int one;
};

void optimal(int n) {
    coins c;
    c.tFive = n / 25;
    n %= 25;
    c.ten = n / 10;
    c %= 10;
    c.five = n / 5;
    c %= 5;
    c.one = n;
    coinPermute(c);
}

void coinPrint(coins c) {
    for (int i = 0; i < c.tFive; i++)
        cout << "25 ";
    for (int i = 0; i < c.ten; i++)
        cout << "10 ";
    for (int i = 0; i < c.tFive; i++)
        cout << "25 ";
    for (int i = 0; i < c.tFive; i++)
        cout << "25 ";


void coinPrint(int n, string p) {
    // cout << "n: " << n << " ";
    if (n < 5) {
        for (int i = 0; i < n; i++)
            p += "1 ";
        cout << p << endl;
    } else if (n < 10){
        coinPrint(n-5, p + "5 ");
        for (int i = 0; i < n; i++)
            p += "1 ";
        cout << p << endl;
    //  coinPrint(n-1, p + "1 ");
    } else if (n < 25) {
        coinPrint(n-10, p + "10 ");
        coinPrint(n-10, p + "5 5 ");
        for (int i = 0; i < n; i++)
            p += "1 ";
        cout << p << endl;
        // coinPrint(n-1, p + "1 ");
    } else {
        coinPrint(n-25, p + "25 ");
        coinPrint(n-25, p + "10 10 5 ");
        coinPrint(n-25, p + "10 5 5 5 ");
        coinPrint(n-5, p + "5 ");
        coinPrint(n-1, p + "1 ");
    }
    return;
}

int main() {
    coinPrint(20, "");
}
